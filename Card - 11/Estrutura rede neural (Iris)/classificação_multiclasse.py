# -*- coding: utf-8 -*-
"""Classificação multiclasse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uzn9zO-6XycABSxH9qzH29OyJSLFtqmn
"""

import pandas as pd

base = pd.read_csv("iris.csv")

# Criação de uma variavel somente para previsores e outra para classe
# Iloc trás determinadas informações do nosso dataframe
# No caso abaixo, desejo todas as linhas com as 4 primeiras colunas(5 com indice)
previsores = base.iloc[:, 0:4].values

# Para esta database, a partir da 4 coluna trás as respostas enquanto das anteriores os tamanhos
classe = base.iloc[:, 4].values
previsores

from sklearn.model_selection import train_test_split
# Modelo de particionamento de uma database

previsoresTreinamento, previsoresTeste, classeTreinamento, classeTeste = (
    train_test_split(previsores, classe_dummy, test_size=0.25)
)

from keras.models import Sequential
from keras.layers import Dense

# Construção da estrutura da rede neural

classificador = Sequential()
# Units = Quantidade de colunas + quantidade de saídas(Resultados) / 2
# input_dim quantidade de atributos quantos neuronios na camada de entrada
classificador.add(Dense(units=4, activation="relu", input_dim=4))

# Segunda camada oculta
classificador.add(Dense(units=4, activation="relu"))

# Por não se tratar de uma estrutura binária, existem mais de 1 resposta válida
# Sendo assim, neuronio de saída representa 3 unidades
# Problema de mais de duas classes, função correta é a softmax
# Gera probabilidade de ser cada uma das opções
classificador.add(Dense(units=3, activation="softmax"))

# kullback_leibler_divergence também serve para loss function
classificador.compile(
    optimizer="adam", loss="categorical_crossentropy", metrics=["categorical_accuracy"]
)

# Treinamento com problemas de mais de 2 classes não permite somente processo de compilação

# Atributo classe contem 3 informações. Para ajuste, é necessário realizar processo
from sklearn.preprocessing import LabelEncoder

# Transforma os 3 atributos em 3 valores diferentes
labelecoder = LabelEncoder()
classe = labelecoder.fit_transform(classe)

# Se retorno no ultimo neuronico cair seguintes parametros
# Conseguimos definir o que de fato serão
# iris setosa 1 0 0
# iris virginica 0 1 0
# iris versicolor 0 0 1


from keras.utils import to_categorical

classe_dummy = to_categorical(classe)


classificador.fit(previsoresTreinamento, classeTreinamento, batch_size=10, epochs=1000)



resultado = classificador.evaluate(previsoresTeste, classeTeste)

resultado

previsoes = classificador.predict(previsoresTeste)
previsoes = (previsoes > 0.5)

import numpy as np
classeTeste2 = [np.argmax(t) for t in classeTeste]

previsoes2 = [np.argmax(t) for t in previsoes]

from sklearn.metrics import confusion_matrix
matriz = confusion_matrix(previsoes2, classeTeste2)

matriz